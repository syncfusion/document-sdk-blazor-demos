@page "/excel/pivottablelayout"
@inject Microsoft.JSInterop.IJSRuntime JS
@inject HttpClient Http
@using System.IO;

@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@

@using BlazorDemos.Data.FileFormats.XlsIO

@*End:Hidden*@
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to layout pivot table using XlsIO.</p>
</SampleDescription>
<ActionDescription>
    <p>When there is a need to summarize large reports, Excel allows you to summarize data through pivot table insertion. Microsoft Excel supplies various built-in styles for pivot tables, allowing the creation of pivot tables with rich formats and more flexibility in summarizing reports.</p>
<p style='display: block'><b>Features:</b></p>
<ul>
<li>Creating pivot tables from template data</li>
<li>Customizing pivot tables with different layouts</li>
<li>Formatting pivot tables with built-in styles</li>
</ul>
</ActionDescription>

<div class="control-section">
    @{
#if WASM || WEBAPP
    }
<p style="font-weight:normal">Click the "Create Pivot Table" button to view the created Excel document. Please note that the Microsoft Excel viewer or Microsoft Excel is required to view the Excel document. </p>
   @{
#else
    }
<p style="font-weight:normal">Click the "Create Pivot Table" button to view the created Excel document. Please note that the Microsoft Excel viewer or Microsoft Excel is required to view the Excel document, and click the "Convert Pivot Table" button to view the converted PDF document. PDF viewer is needed to view the converted PDF document.</p>
    @{
#endif
    }
    <div class="radio-control">
        <div class="celldiv">
            <label style="font-weight:normal">
                Layout options:
            </label>
            <SfRadioButton Label="Compact" Name="LayoutOption" Value=@("Compact") @bind-Checked="@checkedValue"></SfRadioButton>
            <SfRadioButton Label="Outline" Name="LayoutOption" Value=@("Outline") @bind-Checked="@checkedValue"></SfRadioButton>
            <SfRadioButton Label="Tabular" Name="LayoutOption" Value=@("Tabular") @bind-Checked="@checkedValue"></SfRadioButton>
        </div>
    </div>
    <br />
    <div class="celldiv">
        <SfButton @onclick="CreatePivotTable">Create Pivot Table</SfButton>&nbsp;
        @{
#if !WASM && !WEBAPP
        }
        <SfButton @onclick="ConvertPivotTable">Convert Pivot Table</SfButton>
        @{
#endif
        }
    </div>
</div>

<style>
    .checkbox-control {
        margin: 5% 0 2% 0;
    }

    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream stream;
    string button = string.Empty;
    private string checkedValue = "Compact";
    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();


    //End:Hidden

    /// <summary>
    /// Download the input Excel document
    /// </summary>
    public async Task CreatePivotTable()
    {
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/xlsio/pivot-layout.xlsx");
        fileData.Add("pivot-layout.xlsx", new MemoryStream(data));
        PivotTableLayoutService service = new PivotTableLayoutService(fileData);
        button = "CreatePivotTable";
        stream = service.PivotTableLayoutXlsIO(button, checkedValue);
        service.Close();
        await JS.SaveAs("PivotLayout.xlsx", stream.ToArray());
    }

    /// <summary>
    /// Download the JSON document
    /// </summary>
    public async Task ConvertPivotTable()
    {
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/xlsio/pivot-layout.xlsx");
        fileData.Add("pivot-layout.xlsx", new MemoryStream(data));
        PivotTableLayoutService service = new PivotTableLayoutService(fileData);
        button = "ConvertPivotTable";
        stream = service.PivotTableLayoutXlsIO(button, checkedValue);
        service.Close();
        await JS.SaveAs("PivotLayout.pdf", stream.ToArray());
    }

}
