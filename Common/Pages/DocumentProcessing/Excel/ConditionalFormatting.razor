@page "/excel/conditional-formatting"
@inject Microsoft.JSInterop.IJSRuntime JS
@inject HttpClient Http
@using System.IO;

@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@

@using BlazorDemos.Data.FileFormats.XlsIO

@*End:Hidden*@
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to apply conditional formats using XlsIO.</p>
</SampleDescription>
<ActionDescription>
    <p>Microsoft Excel provides enhanced conditional formatting support. Conditional formatting allows you to apply formatting to one or more cells based on the value of the cell or the value of a formula. XlsIO also supports applying more than three conditional formats to the same cell, similar to Excel 2007 and above.</p>
    <p style='display: block'><b>Note: </b>It is not possible to apply more than three conditional formats in earlier versions of Excel.</p>
    <p style='display: block'><b>Features:</b></p>
    <ul>
        <li>Writing conditional formatting on a range of cells</li>
        <li>Advanced options of Excel, such as color scales, icon sets, and data bars</li>
    </ul>
</ActionDescription>

<div class="control-section">
    <p style="font-weight:normal">Click the button to view an Excel spreadsheet generated by Essential XlsIO. Please note that Microsoft Excel Viewer or Microsoft Excel is required to view the resultant document.</p>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <div class="radio-control">
        <label style="font-weight:bold">Save As:</label>        
            <SfRadioButton Label="XLS" Name="XLS" Value=@("XLS") @bind-Checked="@excelVersion"></SfRadioButton>                
            <SfRadioButton Label="XLSX" Name="XLSX" Value=@("XLSX") @bind-Checked="@excelVersion"></SfRadioButton> 
    </div>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="ConditionalFormattingXlsIO">Create Document</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream excelStream;
    string excelVersion = "XLSX";
    //Hidden:Lines
    

    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();

    
    //End:Hidden

    /// <summary>
    /// Create and download the Excel document with conditional formatting
    /// </summary>
    public async Task ConditionalFormattingXlsIO()
    {
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/xlsio/cf-template.xlsx");
        fileData.Add("cf-template.xlsx", new MemoryStream(data));
        ConditionalFormattingService service = new ConditionalFormattingService(fileData);
        excelStream = service.ConditionalFormattingXlsIO(excelVersion);
        service.Close();
        if (excelVersion == "XLSX")
        {
            await JS.SaveAs("Sample.xlsx", excelStream.ToArray());
        }
        else
        {
            await JS.SaveAs("Sample.xls", excelStream.ToArray());
        }
    }
}
