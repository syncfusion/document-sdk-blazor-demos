@page "/excel/call-center-dashboard"
@inject Microsoft.JSInterop.IJSRuntime JS
@inject HttpClient Http
@using System.IO;

@using Syncfusion.Blazor.Buttons
@*Hidden:Lines*@

@using BlazorDemos.Data.FileFormats.XlsIO

@*End:Hidden*@
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p>This sample demonstrates how to use CallCenterDashboard in spreadsheets using XlsIO.</p>
</SampleDescription>

<ActionDescription>
    <p>Call Center dashboard helps in assessing the performance in different levels such as call center level, agent level, and department level over a period of time.</p>
    <p style='display: block'><b>Features:</b></p>
<p>Essential XlsIO supports Call Center Dashboard application features. This sample demonstrates following features:</P>
<ul>
<li>Number formats</li>
<li>Formulas</li>
<li>Cell style formattings (Borders, Font, Alignment, Fill color)</li>
<li>Rich-text formatting</li>
<li>Macros for scroll-bars and option buttons</li>
<li>Advanced conditional formatting with icon sets</li>
<li>Sparklines</li>
<li>Charts</li>
</ul>
</ActionDescription>

<div class="control-section">
    <p style="font-weight:normal">Click the "Input Template" button to view the input Excel document and click the "Create Document" button to view the created Excel document. Please note that the Microsoft Excel viewer or Microsoft Excel is required to view the Excel document.</p>

    <div class="button-section">
        <div id="button-control">
            <div class="row">
                <div>
                    <SfButton @onclick="InputDocument">Input Template</SfButton>&nbsp;
                    <SfButton @onclick="CallCenterDashboardXlsIO">Create Document</SfButton>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .control-section .row {
        margin: 10px 0;
    }
</style>

@code {
    MemoryStream excelStream;
    string button = string.Empty;
    //Hidden:Lines


    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();


    //End:Hidden

    /// <summary>
    /// Create and download the Excel document with What-If Analysis.
    /// </summary>
    public async Task CallCenterDashboardXlsIO()
    {
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/xlsio/call-center-template.xlsx");
        fileData.Add("call-center-template.xlsx", new MemoryStream(data));
        CallCenterDashboardService service = new CallCenterDashboardService(fileData);
        button = "Create Document";
        excelStream = service.CallCenterDashboardXlsIO(button);
        service.Close();
        await JS.SaveAs("CallCenterDashboard.xlsm", excelStream.ToArray());
    }
    public async Task InputDocument()
    {
        string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
        byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/xlsio/call-center-template.xlsx");
        fileData.Add("call-center-template.xlsx", new MemoryStream(data));
        CallCenterDashboardService service = new CallCenterDashboardService(fileData);
        button = "Input Document";
        excelStream = service.CallCenterDashboardXlsIO(button);
        service.Close();
        await JS.SaveAs("CallCenterTemplate.xlsx", excelStream.ToArray());
    }
}