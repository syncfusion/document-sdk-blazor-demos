@page "/word/create-using-latex"
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO
@using Syncfusion.Blazor.Buttons
@using BlazorDemos.Data.DocumentProcessing.Word
@using Syncfusion.Blazor.Inputs
@inject HttpClient Http
@*Hidden:Lines*@
@inherits SampleBaseComponent
@inject NavigationManager NavigationManager


@*End:Hidden*@

<SampleDescription>
    <p style="font-size:16px">This sample demonstrates how to create a Word document with mathematical equation using LaTeX using the .NET Word (DocIO) library.</p>
</SampleDescription>
<ActionDescription>
    <p style="font-size:16px">The .NET Word (DocIO) library provides support for creating mathematical equations from scratch using LaTeX and inserting them into Word documents (DOCX, DOTX, DOCM, DOTM, and XML).</p>
    <p style="font-size:16px">	<ul style="font-size:16px"><li>You can insert an equation in line with the text or float it within a line.</li>
            <li>You can create various types of mathematical equations, including fractions, summations, integrals, matrices, and more.</li>
            <li>You can also create equations using LaTeX.</li>
        </ul>
    </p><p style="font-size:16px">More information about mathematical equations can be found in this <a href="https://help.syncfusion.com/file-formats/docio/working-with-latex" aria-label="documentation section">documentation</a> section.</p>
</ActionDescription>

<div class="control-section">
    @*Server:Block*@
    @{ #if !(WASM) && !WEBAPP }
    <p style="font-size:16px">Click the button to view the generated Word document or PDF. Please note that a Word-compatible viewer is required to open and view the Word document and a PDF viewer is required to view the resultant PDF.</p>
    @{ #endif }
    @*End:Server*@
    @*WebAssembly:Block*@
    @{ #if (WASM) || WEBAPP }
        <p style="font-size:16px">Click the button to view the generated Word document. Please note that Microsoft Word Viewer or Microsoft Word is required to view the resultant Word document.</p>
    @{ #endif }
    @*End:WebAssembly*@
    <table class="row">
        <tr>
            <td>
                <div style="font-weight: bold;">
                    LaTeX to create equation :
                </div>
            </td>
        </tr>
    </table>
    <table  style="width:80%;">
        <tr>
            <td colspan="4">
                <div>
                    <SfTextBox @bind-Value="@latex" @oninput="OnInputEvent" ></SfTextBox>
                </div>
            </td>
        </tr>
    </table>
    <table>
        @*Server:Block*@
        @{ #if !(WASM) && !WEBAPP }
        <tr>
            <td>
                <h5 class="row" style="font-size:16px">Save As:</h5>
            </td>
            <td>
                <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                    <SfRadioButton Label="DOCX" Name="DOCX" Value=@("DOCX") @bind-Checked="@documentType"></SfRadioButton>
                </div>
            </td>
            <td>
                <div class="col-xs-12 col-sm-12 col-lg-1 col-md-6">
                    <SfRadioButton Label="PDF" Name="PDF" Value=@("PDF") @bind-Checked="@documentType"></SfRadioButton>
                </div>
            </td>
        </tr>
        @{ #endif }
        @*End:Server*@
        <tr>
            <td colspan="4">
                <div class="button-section">
                    <div id="button-control">
                        <div class="row">
                            <div>
                                <SfButton @onclick="GenerateDocument">Generate Document</SfButton>
                            </div>
                        </div>
                    </div>
                </div>
            </td>
        </tr>
    </table>
</div>

<style>
    .control-section .row {
    margin: 10px 0;
    }

</style>

@code {
    MemoryStream? documentStream;
    string documentType = "DOCX";
    string latex = @"f\left(x\right)={a}_{0}+\sum_{n=1}^{\infty}{\left({a}_{n}\cos{\frac{n\pi{x}}{L}}+{b}_{n}\sin{\frac{n\pi{x}}{L}}\right)}";
    private void OnInputEvent(ChangeEventArgs changeEvent)
    {
        if(changeEvent.Value!=null)
            latex = (string)changeEvent.Value;
    }
    //Hidden:Lines

    Dictionary<string, MemoryStream> fileData = new Dictionary<string, MemoryStream>();

    //End:Hidden

    /// <summary>
    /// Create and download the simple Word document
    /// </summary>
    public async void GenerateDocument(MouseEventArgs args)
    {
        await LoadTemplate();
        CreateUsingLaTeXService service = new CreateUsingLaTeXService(fileData);
        documentStream = service.CreateUsingLaTeX(documentType,latex);
        service.Close();    
        if (documentType == "DOCX")
            await JS.SaveAs("CreateEquationLaTeX.docx", documentStream.ToArray());
        @*Server:Block*@
#if !(WASM) && !WEBAPP
        else if (documentType == "PDF")
            await JS.SaveAs("CreateEquationLaTeX.pdf", documentStream.ToArray());
#endif
        @*End:Server*@

    }
    public class Annotation
    {
        public string Name { get; set; } = string.Empty;
    }
    /// <summary>
    /// Load the template document
    /// </summary>
    public async Task LoadTemplate()
    {
        if (fileData != null && fileData.Count == 0 && SampleService?.WebAssetsPath != null)
        {
            string fileDataPath = NavigationManager.BaseUri + SampleService.WebAssetsPath;
            byte[] data = await Http.GetByteArrayAsync(fileDataPath + "data/word/create-equation.docx");
            fileData.Add("create-equation.docx", new MemoryStream(data));
        }
    }
}